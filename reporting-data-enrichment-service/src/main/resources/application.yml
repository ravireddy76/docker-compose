project:
  artifactId: reporting-data-enrichment-service
  name: reporting-data-enrichment-service
  version: 1.0.0
  description: Reporting data enrichment service to tap tha reporing data from kafka streams of nimbus ecosystem and push into reporting data store.


# Exposing all the actuator end points (Spring 2.0) #
management:
  endpoints:
    web:
      exposure:
        include:
          '*'

  # Exposing the restart & shutdown endpoint
  endpoint:
    restart:
      enabled: true
    shutdown:
      enabled: true

# For Spring Actuator /info endpoint
info:
  artifact: ${project.artifactId}
  name: ${project.name}
  description: ${project.description}
  version: ${project.version}

# Spring
spring:
  application:
    name: reporting-data-enrichment-service

  # MongoDB configuration
  data:
    mongodb:
      uri: mongodb://localhost:27017/reporting-test

  # Kafka Configuration
  kafka:
    bootstrap-servers: kaas-test-ctc-a.optum.com:443
    properties:
      security:
        protocol: SSL
    ssl:
      truststore-location: file:/Users/rredd16/Nimbus/ecr-reporting-poc/certs/kaas-truststore.jks
      truststore-password: gSFMKip0xGxsotICbnV9Lw
      keystore-location: file:/Users/rredd16/Nimbus/ecr-reporting-poc/certs/kaas-reportingpoc.keystore.jks
      keystore-password: WQ4rqeMHGmZ3ikNTg7OtfA
      key-password: WQ4rqeMHGmZ3ikNTg7OtfA


## Cloud stream configuration
spring.cloud.stream.kafka.binder.brokers: kaas-test-ctc-a.optum.com:443
spring.cloud.stream.kafka.binder.auto-create-topics: false
spring.cloud.stream.kafka.binder.auto-add-partitions: false
spring.cloud.stream.kafka.streams.binder.application-id: ecr-reporting-poc
spring.cloud.stream.kafka.streams.binder.auto-create-topics: false
spring.cloud.stream.kafka.streams.binder.configuration.default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
spring.cloud.stream.kafka.streams.binder.configuration.default.value.serde: io.confluent.kafka.streams.serdes.avro.GenericAvroSerde
spring.cloud.stream.kafka.streams.binder.configuration.schema.registry.url: http://kaas-test-schema-registry-a.optum.com
spring.cloud.stream.kafka.streams.binder.configuration.value.subject.name.strategy: io.confluent.kafka.serializers.subject.TopicRecordNameStrategy
spring.cloud.stream.schema.avro.dynamicSchemaGenerationEnabled: true

# Topics binding for streaming listeners
spring.cloud.stream.bindings.cirrus-report-claim.destination: kaas.cirrus.alpha.claim.composite
spring.cloud.stream.kafka.streams.bindings.cirrus-report-claim.consumer.application-id: claim.composite.report.data-99881

spring.cloud.stream.bindings.composite-member-data.destination: kaas.cirrus.alpha.member.composite
spring.cloud.stream.kafka.streams.bindings.composite-member-data.consumer.application-id: member.composite.report.data-77662

spring.cloud.stream.bindings.composite-membergroup-data.destination: kaas.cirrus.alpha.memgroup.composite
spring.cloud.stream.kafka.streams.bindings.composite-membergroup-data.consumer.application-id: membergroup.composite.report.data-55443

# Kafka topic configuration where listening from topic
topic:
  claimscomposite: kaas.cirrus.alpha.claim.composite
  memgroupcomposite: kaas.cirrus.alpha.memgroup.composite
  membercomposite: kaas.cirrus.alpha.member.composite
  datasummary: billing-data-summary


# Mongodb report-poc database collection names.
report:
  claimscoll: claims
  membercoll: member
  membergroupcoll: member-group

# use a HTTP port 8085
server:
  port: 8085


---
spring:
  profiles: stage

server:
  port: 8080


---
spring:
  profiles: prod

server:
  port: 8080





